package BinarySearch;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Arrays;

/**
 * code_1870
 */
public class six_2 {
    public static void main(String[] args) {
        six_2 six_2 = new six_2();
        int[] dist = {872, 333, 187, 500, 218, 364, 817, 265, 349, 287, 902, 611, 719, 902, 283, 570, 11, 530, 971, 196, 88, 248, 738, 417, 501, 569, 777, 247, 708, 488, 662, 729, 503, 459, 812, 18, 96, 302, 227, 415, 709, 250, 314, 680, 596, 378, 485, 567, 544, 353, 436, 764, 564, 339, 361, 720, 465, 278, 314, 258, 237, 124, 739, 198, 324, 123, 761, 549, 974, 781, 707, 190, 197, 222, 757, 496, 284, 742, 604, 779, 538, 612, 290, 103, 853, 199, 304, 233, 370, 184, 310, 15, 726, 547, 130, 281, 47, 998, 56, 567, 300, 715, 967, 130, 654, 890, 771, 503, 106, 894, 13, 588, 292, 481, 491, 452, 349, 189, 989, 53, 259, 964, 883, 490, 117, 842, 67, 411, 504, 76, 591, 645, 703, 55, 156, 153, 831, 577, 972, 312, 88, 255, 122, 572, 783, 427, 621, 611, 810, 634, 232, 795, 536, 390, 462, 931, 454, 305, 881, 603, 440, 313, 583, 636, 62, 625, 984, 758, 102, 971, 782, 213, 641, 217, 271, 677, 84, 161, 246, 178, 566, 77, 161, 3, 419, 462, 706, 609, 482, 299, 34, 238, 296, 724, 290, 720, 881, 465, 73, 704, 240, 947, 271, 807, 811, 641, 604, 678, 824, 957, 203, 436, 118, 558, 231, 664, 153, 931, 273, 847, 146, 74, 62, 170, 812, 315, 610, 767, 845, 583, 944, 296, 450, 128, 480, 706, 312, 717, 413, 966, 279, 513, 553, 506, 449, 83, 613, 41, 911, 443, 753, 331, 619, 257, 27, 94, 235, 985, 691, 857, 882, 590, 602, 974, 22, 784, 689, 842, 276, 591, 42, 782, 775, 180, 482, 532, 668, 453, 939, 285, 186, 600, 447, 651, 834, 504, 993, 94, 482, 357, 419, 342, 329, 687, 108, 879, 165, 338, 422, 711, 508, 296, 679, 968, 411, 834, 779, 564, 38, 466, 91, 323, 259, 332, 119, 994, 792, 414, 886, 527, 845, 2, 674, 891, 556, 474, 424, 56, 193, 531, 371, 638, 775, 511, 641, 453, 779, 53, 209, 274, 563, 135, 950, 295, 449, 902, 716, 497, 125, 30, 997, 646, 624, 819, 246, 727, 163, 319, 565, 15, 566, 418, 96, 231, 862, 935, 117, 473, 970, 121, 664, 853, 158, 511, 956, 734, 299, 522, 723, 280, 426, 855, 495, 484, 250, 468, 565, 149, 393, 196, 944, 614, 521, 765, 901, 140, 885, 72, 283, 792, 809, 875, 425, 349, 957, 807, 520, 274, 841, 3, 290, 744, 306, 858, 602, 594, 676, 502, 887, 153, 458, 552, 496, 354, 341, 566, 782, 557, 387, 467, 956, 330, 891, 194, 715, 245, 586, 393, 240, 877, 795, 421, 45, 326, 763, 485, 723, 936, 831, 391, 396, 680, 812, 841, 668, 156, 508, 988, 38, 130, 515, 989, 605, 340, 891, 103, 896, 866, 451, 103, 539, 933, 468, 16, 740, 148, 420, 892, 671, 994, 159, 77, 481, 801, 993, 272, 347, 639, 710, 408, 666, 83, 873, 337, 873, 691, 880, 547, 390, 978, 325, 642, 736, 909, 778, 500, 894, 555, 37, 633, 71, 241, 647, 701, 944, 295, 233, 765, 93, 445, 101, 779, 649, 721, 894, 103, 455, 171, 711, 307, 926, 30, 48, 333, 816, 58, 301, 368, 384, 442, 150, 251, 544, 422, 580, 699, 812, 185, 175, 180, 81, 625, 892, 392, 635, 700, 247, 510, 935, 598, 147, 238, 473, 654, 261, 471, 262, 683, 10, 921, 824, 477, 923, 295, 694, 560, 162, 76, 453, 968, 354, 602, 307, 655, 986, 435, 707, 257, 468, 866, 310, 204, 394, 874, 495, 110, 243, 391, 586, 368, 589, 303, 717, 303, 23, 850, 675, 406, 282, 9, 580, 886, 703, 797, 763, 997, 51, 933, 621, 764, 509, 853, 926, 925, 294, 795, 819, 236, 622, 822, 361, 225, 652, 195, 636, 257, 695, 774, 739, 786, 676, 698, 859, 141, 644, 100, 926, 643, 662, 41, 317, 808, 452, 35, 594, 374, 750, 135, 93, 932, 303, 335, 766, 426, 180, 206, 136, 806, 553, 898, 995, 375, 544, 514, 936, 280, 851, 169, 264, 936, 845, 967, 494, 991, 826, 303, 765, 892, 347, 824, 118, 480, 987, 78, 145, 773, 990, 232, 881, 693, 742, 691, 407, 991, 867, 824, 571, 375, 93, 810, 405, 15, 271, 550, 127, 466, 378, 689, 767, 689, 269, 599, 391, 843, 654, 963, 381, 111, 692, 240, 483, 26, 635, 906, 966, 575, 336, 938, 625, 227, 664, 65, 651, 844, 476, 932, 718, 310, 665, 419, 120, 144, 47, 969, 39, 312, 505, 119, 100, 241, 909, 551, 139, 398, 465, 380, 687, 973, 761, 714, 969, 554, 430, 602, 761, 745, 159, 907, 425, 671, 102, 854, 502, 631, 418, 962, 975, 287, 34, 707, 380, 223, 455, 456, 974, 242, 876, 372, 102, 703, 377, 558, 924, 661, 368, 63, 408, 283, 195, 992, 126, 972, 869, 844, 466, 94, 679, 218, 658, 655, 612, 995, 22, 52, 806, 342, 250, 129, 806, 579, 211, 71, 850, 784, 568, 213, 601, 222, 833, 891, 239, 337, 793, 152, 808, 923, 611, 3, 284, 880, 149, 134, 554, 257, 818, 179, 113, 677, 888, 27, 135, 16, 367, 809, 808, 244, 603, 332, 17, 179, 272, 54, 130, 760, 432, 539, 117, 764, 66, 488, 460, 797, 371, 526, 608, 112, 463, 516, 227, 969, 630, 45, 745, 803, 931, 888, 675, 534, 309, 470, 659, 988, 32, 63, 491, 868, 412, 437, 703, 111, 503, 730, 932, 455, 76, 921, 83, 330, 623, 152, 68, 130, 282, 640, 649, 600, 562, 730, 333, 391, 612, 544, 302, 465, 518, 620, 441, 102, 813, 719, 118, 874, 671, 667, 899, 788, 565, 739, 887, 221, 441, 463, 910, 234, 424, 348, 848, 465, 409, 426, 748, 98, 321, 438, 321, 682, 262, 384, 977, 157, 704, 946, 486, 69, 94, 852, 88, 96, 443, 99, 763, 757, 382, 832, 134, 570, 62, 601, 980, 576, 576, 338, 687, 126, 421, 363, 895, 682, 964, 769, 434, 889, 938, 739, 53, 992, 295, 615, 320, 361, 107, 592, 520, 218, 159, 673, 494, 230, 868, 111, 359, 866, 570, 377, 118, 781, 286, 588, 232, 827, 440, 866, 575, 998, 786, 839, 637, 629, 692, 659, 571, 27, 624, 952, 674, 850, 711, 274, 30, 185, 280, 720, 781, 317, 944, 348, 360, 7, 186, 891, 147, 580, 674, 411, 72, 146, 759, 649, 996, 32, 94, 765, 544, 221, 386, 430, 465, 350, 162, 379, 320, 739, 333, 796, 965, 582, 611, 87, 905, 54, 160, 162, 773, 633, 51, 691, 84, 279, 454, 678, 435, 498, 622, 453, 425, 280, 221, 774, 525, 117, 354, 441, 114, 291, 695, 695, 608, 499, 540, 684, 316, 47, 226, 405, 614, 57, 8, 210, 309, 969, 217, 786, 141, 783, 262, 297, 336, 123, 8, 510, 765, 441, 180, 133, 390, 546, 721, 236, 513, 573, 854, 685, 826, 363, 74, 407, 883, 760, 44, 447, 20, 471, 944, 80, 883, 321, 590, 440, 588, 415, 727, 656, 428, 297, 118, 415, 22, 990, 333, 176, 821, 971, 633, 472, 852, 707, 942, 371, 91, 448, 865, 109, 250, 447, 604, 411, 537, 81, 406, 892, 318, 764, 348, 227, 342, 798, 173, 79, 523, 649, 117, 544, 523, 199, 928, 795, 358, 360, 745, 982, 839, 661, 835, 152, 242, 106, 150, 263, 203, 178, 617, 157, 779, 778, 672, 78, 182, 975, 792, 644, 506, 476, 773, 578, 779, 594, 460, 698, 947, 904, 579, 659, 651, 640, 331, 885, 995, 643, 324, 155, 451, 70, 481, 453, 647, 311, 816, 282, 606, 58, 361, 520, 76, 318, 473, 463, 39, 59, 378, 852, 294, 79, 661, 885, 876, 93, 630, 609, 520, 394, 474, 595, 568, 978, 811, 757, 918, 43, 461, 931, 830, 586, 668, 193, 330, 620, 488, 514, 155, 981, 64, 462, 106, 831, 921, 858, 352, 732, 87, 517, 662, 177, 41, 254, 725, 449, 450, 537, 536, 625, 163, 373, 382, 940, 290, 397, 419, 794, 347, 696, 613, 54, 809, 647, 663, 343, 68, 338, 97, 572, 695, 396, 291, 259, 742, 873, 673, 988, 929, 618, 895, 154, 342, 84, 597, 680, 145, 939, 359, 318, 991, 672, 716, 679, 402, 133, 610, 726, 961, 87, 318, 573, 386, 659, 811, 337, 833, 131, 687, 720, 849, 970, 757, 702, 935, 540, 96, 662, 687, 434, 521, 371, 19, 372, 317, 185, 974, 220, 350, 971, 785, 498, 197, 232, 141, 159, 80, 303, 865, 808, 104, 520, 790, 553, 856, 757, 905, 540, 39, 678, 345, 898, 785, 633, 135, 612, 386, 158, 167, 186, 852, 710, 790, 640, 829, 925, 170, 739, 449, 45, 421, 374, 693, 737, 244, 993, 455, 626, 292, 771, 767, 803, 460, 240, 547, 245, 317, 989, 829, 804, 481, 926, 856, 199, 377, 695, 970, 585, 452, 473, 788, 289, 797, 392, 515, 541, 429, 990, 166, 837, 205, 821, 620, 142, 894, 257, 54, 657, 493, 896, 381, 568, 957, 106, 729, 867};
        System.out.println(six_2.minSpeedOnTime(dist, 12321.4));
    }

    public int minSpeedOnTime(int[] dist, double hour) {
        int i = 1;//最小速度
        int j = Arrays.stream(dist).max().getAsInt() * 100;//最大速度
        while (i <= j) {
            int m = i + (j - i) / 2;
            if (costtime(m, dist) > hour) {
                i = m + 1;
            } else {
                j = m - 1;
            }
        }
        return i > Arrays.stream(dist).max().getAsInt() * 100 ? -1 : i;
    }

    public double costtime(double speed, int[] dist) {
        int len = dist.length;
        double result = 0;
        for (int i = 0; i < len - 1; i++) {
            result += Math.ceil(dist[i] / speed);
        }
        return result + dist[len - 1] / speed;
    }
//        int right = 0;
//        for (int i : dist) {
//            right = Math.max(i * 100, right);
//        }
//        int n = dist.length;
//        int left = 1, ans = -1;
//        String temp = String.valueOf(hour);
//        int index = -1, h = 0;
//        index = temp.indexOf('.');
//        StringBuffer s = new StringBuffer(temp);
//        s.delete(index, index + 1);
//        if (index == temp.length() - 2) {
//            h = Integer.valueOf(s.toString()) * 10;
//        } else {
//            h = Integer.valueOf(s.toString());
//        }
//
//        while (left <= right) {
//            int mid = (left + right) >> 1;
//            BigInteger k = BigInteger.valueOf(0);
//            for (int i = 0; i < n - 1; i++) {
////                k += ((dist[i] - 1) / mid) + 1;
//                k.add(BigInteger.valueOf(((dist[i] - 1) / mid) + 1));
//            }
////            int cnt = (k * mid + dist[n - 1]);
//            BigInteger cnt = k.multiply(BigInteger.valueOf(mid)).add(BigInteger.valueOf(dist[n - 1]));
////            int a = cnt * 100;
//            BigInteger temp_a = cnt.multiply(BigInteger.valueOf(100));
////            BigInteger temp_a = BigInteger.valueOf(a);
//////            double temp = (hour * 100);
////            int b = h * mid;
//            BigInteger temp_h = BigInteger.valueOf(h);
//            BigInteger temp_mid = BigInteger.valueOf(mid);
//            BigInteger temp_b = temp_h.multiply(temp_mid);
////            a <= b
//            if (temp_a.compareTo(temp_b) <= 0) {
//                ans = mid;
//                right = mid - 1;
//            } else {
//                left = mid + 1;
//            }
//        }
//        return ans;
//    }
}
